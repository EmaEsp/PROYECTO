{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Proyecto C++","text":"<p>Bienvenido a la documentaci\u00f3n del proyecto C++.</p>"},{"location":"#contenido","title":"Contenido","text":"<ol> <li>Descripci\u00f3n del C\u00f3digo</li> <li>Adis</li> <li>Paralelizar</li> </ol>"},{"location":"descripcion_codigo/","title":"Descripci\u00f3n del C\u00f3digo","text":"<p>El c\u00f3digo implementado en C++ trata sobre la multiplicaci\u00f3n de matrices utilizando la biblioteca MPI (Message Passing Interface) para la computaci\u00f3n paralela. Esta t\u00e9cnica permite distribuir la carga de trabajo entre m\u00faltiples procesos o nodos de un sistema distribuido, mejorando as\u00ed el rendimiento y la eficiencia computacional al aprovechar los recursos disponibles de manera concurrente.</p>"},{"location":"descripcion_codigo/#descripcion-detallada-del-codigo","title":"Descripci\u00f3n Detallada del C\u00f3digo","text":"<p>El programa comienza con la inicializaci\u00f3n de MPI, configurando el entorno de ejecuci\u00f3n para permitir la comunicaci\u00f3n entre procesos. A continuaci\u00f3n, el c\u00f3digo verifica y lee los par\u00e1metros de entrada desde la l\u00ednea de comandos, que especifican las dimensiones de las matrices A, B y C para la multiplicaci\u00f3n matricial C = A * B.</p> <p>Una vez que se han le\u00eddo y validado las dimensiones de las matrices, el proceso principal (rank 0) inicializa las matrices A y B. La matriz A se inicializa con valores ascendentes en cada fila, mientras que la matriz B se inicializa con valores ascendentes en cada columna. Estas matrices se muestran por pantalla para verificar su correcta inicializaci\u00f3n antes de proceder con la multiplicaci\u00f3n.</p> <p>Luego, se procede con la distribuci\u00f3n de los datos necesarios para la multiplicaci\u00f3n entre los procesos utilizando MPI. Cada proceso recibe una porci\u00f3n de la matriz A y la matriz B completa se difunde (broadcast) a todos los procesos. A continuaci\u00f3n, cada proceso realiza la multiplicaci\u00f3n de la porci\u00f3n de A que recibi\u00f3 con la matriz B completa, calculando as\u00ed su parte de la matriz C.</p> <p>Una vez completada la multiplicaci\u00f3n local, los resultados se recolectan de vuelta en el proceso 0 utilizando operaciones de recolecci\u00f3n (Gather) y recolecci\u00f3n variable (Gatherv) de MPI. Estas operaciones aseguran que la matriz C resultante se reconstruya correctamente en el proceso 0 a partir de las contribuciones individuales de cada proceso.</p> <p>Finalmente, se calcula y muestra el tiempo total de ejecuci\u00f3n del programa para evaluar el rendimiento del algoritmo paralelo implementado.</p>"},{"location":"descripcion_codigo/#importancia-y-aplicaciones","title":"Importancia y Aplicaciones","text":"<p>La multiplicaci\u00f3n de matrices es un problema fundamental en la computaci\u00f3n cient\u00edfica y la inteligencia artificial, utilizado en una amplia variedad de aplicaciones que van desde simulaciones f\u00edsicas y financieras hasta aprendizaje autom\u00e1tico y procesamiento de im\u00e1genes. La implementaci\u00f3n paralela de este problema, como se muestra en este c\u00f3digo, es esencial para manejar grandes vol\u00famenes de datos y mejorar significativamente los tiempos de ejecuci\u00f3n en sistemas distribuidos.</p> <p>En resumen, el c\u00f3digo proporcionado demuestra c\u00f3mo aprovechar MPI para realizar eficientemente la multiplicaci\u00f3n de matrices en un entorno distribuido, mostrando paso a paso c\u00f3mo se distribuyen los datos, se realiza el c\u00e1lculo paralelo y se recolectan los resultados finales para su uso posterior.</p>"}]}